comments on columns during database creation
having more than one fk in a table and being able to do the parents and children relationships during honey creation
working with a table that has a fk that refrences its self
in the less strict mode which is the default one, the _hive,json file changes as tables are created depending on how the request is structured
migrations

if($is_restricted==true && BEE_ENFORCE_RELATIONSHIPS == false){
for inserting and updating records

--updating
--invisible fields/ hidden fields
--attributes list
--seeding
validations
multitenancy
--roles based security (menu items,action items)
logging/audit trails
--group
--order by/ sorting
--hashing
--encryption
--COUNT
pagination  and what would have been the returned value count
realtime sockets 
email
sms
batch processing e.g upload excell file
export database
image resizing
working with existing systems
array syntax : boys:[{}] on the ui client
clone jobs
triggers
server rendering
paypal integration
true africa mobile money integration
conditions
offline access and synchronisation
--.xtruction
--sudo delete
--having
queues
limits  and what would have been the returned value count
--fx calculations


SELECT product.id, product.name, 
(SELECT SUM(stockin_item.quantity) FROM stockin_item WHERE stockin_item.product_id = product.id) as q1,
(SELECT SUM(stockout_item.quantity) FROM stockout_item WHERE stockout_item.product_id = product.id) as q2
FROM `product`

SELECT product.id, product.name, 
(
(SELECT SUM(stockin_item.quantity) FROM stockin_item WHERE stockin_item.product_id = product.id) -
(SELECT SUM(stockout_item.quantity) FROM stockout_item WHERE stockout_item.product_id = product.id)
) as q3
FROM `product`
where id = 6

SELECT product.id as products__id, product.name as products__name,  
(SELECT SUM(stockin_item.quantity) FROM stockin_item WHERE 
    (stockin_item.is_deleted = 0) AND ( (  stockin_item.id > 1) AND ( stockin_item.product_id = product.id )))-
(SELECT SUM(stockout_item.quantity) FROM stockout_item WHERE  
    (stockout_item.is_deleted = 0) AND ( stockout_item.product_id = product.id )) as products__quantity, product.is_deleted as 
    products__is_deleted FROM product  



SELECT product.id as products__id, product.name as products__name,  
(SELECT SUM(stockin_item.quantity) FROM stockin_item WHERE  (stockin_item.is_deleted = 0) AND ( (  stockin_item.id > 1) AND ( stockin_item.product_id = product.id )) )-
(SELECT SUM(stockout_item.quantity) FROM stockout_item WHERE  (stockout_item.is_deleted = 0) AND ( stockout_item.product_id = product.id )) 
as products__quantity, 
product.is_deleted as products__is_deleted FROM product


IFNULL(
    (SELECT SUM(stockin_item.quantity)  FROM stockin_item WHERE  (stockin_item.is_deleted = 0) AND ( (  stockin_item.id > 1) AND ( stockin_item.product_id = 8 )) GROUP  BY stockin_item.product_id)
,0) as products__quantity, 


SELECT 
product.id as products__id, 
product.name as products__name,  
(SELECT SUM(stockin_item.quantity) FROM stockin_item _fx_WHERE  (stockin_item.is_deleted = 0) AND ( (  stockin_item.id > 0) AND ( stockin_item.product_id = product.id )))-(SELECT SUM(stockout_item.quantity) FROM stockout_item _fx_WHERE  (stockout_item.is_deleted = 0) AND ( stockout_item.product_id = product.id )) as products__quantitxy, 
product.is_deleted as products__is_deleted,   
unit.id as products__unit__id, 
unit.name as products__unit__name, 
unit.symbol as products__unit__symbol, 
unit.description as products__unit__description 
FROM product  
INNER JOIN unit ON product.unit_id=unit.id


=>run.php
shifted if not public registration to be the last logic in the file